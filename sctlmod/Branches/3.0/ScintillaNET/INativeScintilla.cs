#region Using Directives

using System;
using System.ComponentModel;

#endregion Using Directives


namespace ScintillaNet
{
	[Obsolete("The managed Scintilla control replaces the native interface.")]
	public interface INativeScintilla
	{
		void AddRefDocument(IntPtr pDoc);
		bool AutoCActive();
		void AutoCCancel();
		void AutoCComplete();
		bool AutoCGetAutoHide();
		bool AutoCGetCancelAtStart();
		bool AutoCGetChooseSingle();
		int AutoCGetCurrent();
		bool AutoCGetDropRestOfWord();
		bool AutoCGetIgnoreCase();
		int AutoCGetMaxHeight();
		int AutoCGetMaxWidth();
		char AutoCGetSeparator();
		char AutoCGetTypeSeparator();
		int AutoCPosStart();
		void AutoCSelect(string select);
		event EventHandler<NativeScintillaEventArgs> AutoCSelection;
		void AutoCSetAutoHide(bool autoHide);
		void AutoCSetCancelAtStart(bool cancel);
		void AutoCSetChooseSingle(bool chooseSingle);
		void AutoCSetDropRestOfWord(bool dropRestOfWord);
		void AutoCSetFillUps(string chars);
		void AutoCSetIgnoreCase(bool ignoreCase);
		void AutoCSetMaxHeight(int rowCount);
		void AutoCSetMaxWidth(int characterCount);
		void AutoCSetSeparator(char separator);
		void AutoCSetTypeSeparator(char separatorCharacter);
		void AutoCShow(int lenEntered, string list);
		void AutoCStops(string chars);
		void BeginUndoAction();
		void BraceBadLight(int pos1);
		void BraceHighlight(int pos1, int pos2);
		int BraceMatch(int pos, int maxReStyle);
		bool CallTipActive();
		void CallTipCancel();
		event EventHandler<NativeScintillaEventArgs> CallTipClick;
		void CallTipSetBack(int colour);
		void CallTipSetFore(int colour);
		void CallTipSetForeHlt(int colour);
		void CallTipSetHlt(int hlStart, int hlEnd);
		void CallTipShow(int posStart, string definition);
		void CallTipUseStyle(int tabsize);
		event EventHandler<NativeScintillaEventArgs> Change;
		event EventHandler<NativeScintillaEventArgs> CharAdded;
		void ChooseCaretX();
		void ClearAllCmdKeys();
		void ClearDocumentStyle();
		void ClearRegisteredImages();
		void Colourise(int start, int end);
		void ConvertEols(int eolMode);
		void CopyRange(int start, int end);
		IntPtr CreateDocument();
		int DocLineFromVisible(int displayLine);
		event EventHandler<NativeScintillaEventArgs> DoubleClick;
		event EventHandler<NativeScintillaEventArgs> DwellEnd;
		event EventHandler<NativeScintillaEventArgs> DwellStart;
		void EndUndoAction();
		void EnsureVisible(int line);
		int FindColumn(int line, int column);
		int FormatRange(bool bDraw, ref RangeToFormat pfr);
		int GetAnchor();
		bool GetBackSpaceUnIndents();
		int GetCaretFore();
		int GetCaretLineBack();
		int GetCaretLineBackAlpha();
		bool GetCaretLineVisible();
		int GetCaretPeriod();
		bool GetCaretSticky();
		int GetCaretStyle();
		int GetCaretWidth();
		char GetCharAt(int position);
		int GetCurrentPos();
		IntPtr GetDocPointer();
		int GetEdgeColumn();
		int GetEdgeMode();
		int GetEndStyled();
		int GetEolMode();
		int GetFirstVisibleLine();
		bool GetFoldExpanded(int line);
		uint GetFoldLevel(int line);
		int GetFoldParent(int line);
		int GetHotSpotActiveBack();
		int GetHotSpotActiveFore();
		bool GetHotSpotActiveUnderline();
		bool GetHotSpotSingleLine();
		int GetIndent();
		bool GetIndentationGuides();
		int GetLastChild(int line, int level);
		int GetLength();
		int GetLexer();
		int GetLine(int line, out string text);
		int GetLineCount();
		int GetLineEndPosition(int line);
		int GetLineIndentation(int line);
		int GetLineIndentPosition(int line);
		int GetLineSelEndPosition(int line);
		int GetLineSelStartPosition(int line);
		int GetLineState(int line);
		bool GetLineVisible(int line);
		int GetMarginMaskN(int margin);
		bool GetMarginSensitiveN(int margin);
		int GetMarginTypeN(int margin);
		int GetMarginWidthN(int margin);
		int GetMaxLineState();
		bool GetMouseDownCaptures();
		bool GetOvertype();
		bool GetPasteConvertEndings();
		void GetProperty(string key, out string value);
		void GetPropertyExpanded(string key, out string value);
		int GetPropertyInt(string key, int @default);
		int GetSelectionEnd();
		int GetSelectionMode();
		int GetSelectionStart();
		byte GetStyleAt(int position);
		[Obsolete("The modern style indicators make this obsolete, this should always be 7")]
		int GetStyleBits();
		void GetStyledText(ref TextRange tr);
		bool GetTabIndents();
		int GetTabWidth();
		int GetTextLength();
		int GetTextRange(ref TextRange tr);
		bool GetUseTabs();
		bool GetViewEol();
		int GetViewWs();
		int GetXOffset();
		void GotoLine(int line);
		void GotoPos(int position);
		void HideLines(int lineStart, int lineEnd);
		event EventHandler<NativeScintillaEventArgs> HotSpotClick;
		event EventHandler<NativeScintillaEventArgs> HotSpotDoubleclick;
		void IndicatorClearRange(int position, int fillLength);
		event EventHandler<NativeScintillaEventArgs> IndicatorClick;
		void IndicatorFillRange(int position, int fillLength);
		int IndicatorEnd(int indicator, int position);
		event EventHandler<NativeScintillaEventArgs> IndicatorRelease;
		int IndicGetFore(int indicatorNumber);
		int IndicGetStyle(int indicatorNumber);
		bool IndicGetUnder(int indicatorNumber);
		void IndicSetFore(int indicatorNumber, int colour);
		void IndicSetStyle(int indicatorNumber, int indicatorStyle);
		void IndicSetUnder(int indicatorNumber, bool under);
		void InsertText(int pos, string text);
		event EventHandler<NativeScintillaEventArgs> Key;
		int LineFromPosition(int pos);
		int LineLength(int line);
		void LinesJoin();
		int LinesOnScreen();
		void LinesSplit(int pixelWidth);
		void LoadLexerLibrary(string path);
		event EventHandler<NativeScintillaEventArgs> MacroRecord;
		event EventHandler<NativeScintillaEventArgs> MarginClick;
		int MarkerAdd(int line, int markerNumber);
		void MarkerAddSet(int line, uint markerMask);
		void MarkerDefine(int markerNumber, int markerSymbol);
		void MarkerDefinePixmap(int markerNumber, string xpm);
		void MarkerDelete(int line, int markerNumber);
		void MarkerDeleteAll(int markerNumber);
		void MarkerDeleteHandle(int handle);
		int MarkerGet(int line);
		int MarkerLineFromHandle(int handle);
		int MarkerNext(int lineStart, uint markerMask);
		int MarkerPrevious(int lineStart, uint markerMask);
		void MarkerSetAlpha(int markerNumber, int alpha);
		void MarkerSetBack(int markerNumber, int colour);
		void MarkerSetFore(int markerNumber, int colour);
		event EventHandler<NativeScintillaEventArgs> Modified;
		event EventHandler<NativeScintillaEventArgs> ModifyAttemptRO;
		void MoveCaretInsideView();
		event EventHandler<NativeScintillaEventArgs> NeedShown;
		event EventHandler<NativeScintillaEventArgs> Painted;
		int PointXFromPosition(int position);
		int PointYFromPosition(int position);
		int PositionFromLine(int line);
		int PositionFromPoint(int x, int y);
		int PositionFromPointClose(int x, int y);
		void RegisterImage(int type, string xpmData);
		void ReleaseDocument(IntPtr pDoc);
		int ReplaceTarget(int length, string text);
		event EventHandler<NativeScintillaEventArgs> SavePointLeft;
		event EventHandler<NativeScintillaEventArgs> SavePointReached;
		void ScrollCaret();
		bool SelectionIsRectangle();
		IntPtr SendMessageDirect(uint msg, IntPtr wParam, IntPtr lParam);
		int SendMessageDirect(uint msg);
		int SendMessageDirect(uint msg, int wParam);
		int SendMessageDirect(uint msg, VOID wParam, int lParam);
		int SendMessageDirect(uint msg, VOID wParam, string lParam);
		int SendMessageDirect(uint msg, int wParam, int lParam);
		int SendMessageDirect(uint msg, int wParam, uint lParam);
		int SendMessageDirect(uint msg, bool wParam, int lParam);
		int SendMessageDirect(uint msg, int wParam, bool lParam);
		int SendMessageDirect(uint msg, string wParam);
		int SendMessageDirect(uint msg, bool wParam);
		int SendMessageDirect(uint msg, string wParam, int lParam);
		int SendMessageDirect(uint msg, int wParam, string lParam);
		int SendMessageDirect(uint msg, int wParam, out string text);
		int SendMessageDirect(uint msg, out string text);
		int SendMessageDirect(uint msg, IntPtr wParam, out string lParam, int length);
		int SendMessageDirect(uint msg, string wParam, out string lParam);
		int SendMessageDirect(uint msg, string wParam, string lParam);
		void SetAnchor(int position);
		void SetBackSpaceUnIndents(bool bsUnIndents);
		void SetCaretFore(int alpha);
		void SetCaretLineBack(int show);
		void SetCaretLineBackAlpha(int alpha);
		void SetCaretLineVisible(bool colour);
		void SetCaretPeriod(int milliseconds);
		void SetCaretSticky(bool useCaretStickyBehaviour);
		void SetCaretStyle(int style);
		void SetCaretWidth(int pixels);
		void SetCurrentPos(int position);
		void SetCursor(int curType);
		void SetDocPointer(IntPtr pDoc);
		void SetEdgeColour(int colour);
		void SetEdgeColumn(int column);
		void SetEdgeMode(int mode);
		void SetEolMode(int eolMode);
		void SetFoldExpanded(int line, bool expanded);
		void SetFoldFlags(int flags);
		void SetFoldLevel(int line, uint level);
		void SetFoldMarginColour(bool useSetting, int colour);
		void SetHotspotActiveBack(bool useHotSpotBackColour, int colour);
		void SetHotspotActiveFore(bool useHotSpotForeColour, int colour);
		void SetHotspotActiveUnderline(bool underline);
		void SetHotspotSingleLine(bool singleLine);
		void SetIndent(int widthInChars);
		void SetIndentationGuides(bool view);
		void SetIndicatorCurrent(int indicator);
		void SetIndicatorValue(int value);
		void SetKeywords(int keywordSet, string keyWordList);
		void SetLexer(int lexer);
		void SetLexerLanguage(string name);
		void SetLineIndentation(int line, int indentation);
		void SetLineState(int line, int value);
		void SetMarginMaskN(int margin, int mask);
		void SetMarginSensitiveN(int margin, bool sensitive);
		void SetMarginTypeN(int margin, int type);
		void SetMarginWidthN(int margin, int pixelWidth);
		void SetModEventMask(int modEventMask);
		void SetMouseDownCaptures(bool captures);
		void SetOvertype(bool overType);
		void SetPasteConvertEndings(bool convert);
		void SetPrintColourMode(int mode);
		void SetPrintMagnification(int magnification);
		void SetProperty(string key, string value);
		void SetSavePoint();
		void SetSel(int anchorPos, int currentPos);
		void SetSelectionEnd(int position);
		void SetSelectionMode(int mode);
		void SetSelectionStart(int position);
		[Obsolete("The modern style indicators make this obsolete, this should always be 7")]
		void SetStyleBits(int bits);
		void SetStyling(int length, int style);
		void SetTabIndents(bool tabIndents);
		void SetTabWidth(int widthInChars);
		void SetTargetEnd(int pos);
		void SetTargetStart(int pos);
		void SetUseTabs(bool useTabs);
		void SetViewEol(bool visible);
		void SetViewWs(int wsMode);
		void SetWhitespaceBack(bool useWhitespaceBackColour, int colour);
		void SetWhitespaceChars(string chars);
		void SetWhitespaceFore(bool useWhitespaceForeColour, int colour);
		void SetWordChars(string chars);
		void ShowLines(int lineStart, int lineEnd);
		void StartStyling(int position, int mask);
		void StyleClearAll();
		event EventHandler<NativeScintillaEventArgs> StyleNeeded;
		void StyleResetDefault();
		int StyleGetBack(int styleNumber);
		int StyleGetCase(int styleNumber);
		bool StyleGetChangeable(int styleNumber);
		bool StyleGetEOLFilled(int styleNumber);
		int StyleGetFore(int styleNumber);
		bool StyleGetHotSpot(int styleNumber);
		bool StyleGetVisible(int styleNumber);
		void StyleSetBack(int styleNumber, int colour);
		void StyleSetCase(int styleNumber, int caseMode);
		void StyleSetChangeable(int styleNumber, bool changeable);
		void StyleSetEOLFilled(int styleNumber, bool eolFilled);
		void StyleSetFore(int styleNumber, int colour);
		void StyleSetHotSpot(int styleNumber, bool hotspot);
		void StyleSetVisible(int styleNumber, bool visible);
		int TextHeight(int line);
		int TextWidth(int styleNumber, string text);
		void ToggleFold(int line);
		event EventHandler<NativeScintillaEventArgs> UriDropped;
		event EventHandler<NativeScintillaEventArgs> UserListSelection;
		void UserListShow(int listType, string list);
		int VisibleFromDocLine(int docLine);
		int WordEndPosition(int position, bool onlyWordCharacters);
		int WordStartPosition(int position, bool onlyWordCharacters);
		int WrapCount(int docLine);
	}
}
